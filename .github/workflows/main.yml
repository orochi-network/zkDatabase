# This GitHub Action will loop through all sub-repos:
# If a package is in the publish list and its package.json version is higher than the NPM registry version, it will be published.
# For now: The publish list is:
# @zkdb/common
# @zkdb/api
# @zkdb/smart-contract
# @zkdb/permission
# zkdb

name: Publish packages in zkDatabase Repository

on:
  push:
    branches:
      - main

env:
  NPM_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
  NPM_INSTALL_TOKEN: ${{ secrets.NPM_INSTALL_TOKEN }}

jobs:
  build:
    runs-on: [self-hosted, linux]
    env:
      working-directory: ./packges/zkdb

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install package & run lint & build at root
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NPM_INSTALL_TOKEN} \n always-auth=true" > ~/.npmrc
          yarn install
          yarn lint
          yarn build
        env:
          NPM_INSTALL_TOKEN: ${{ env.NPM_INSTALL_TOKEN }}
      - name: Install compare-versions package
        run: yarn add -W -D compare-versions@6.1.0
      - name: Loop through all packages and publish them if necessary
        env:
          NPM_TOKEN: ${{ env.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN} \n always-auth=true" > ~/.npmrc
          LIST_PACKAGE=("@zkdb/common" "@zkdb/api" "@zkdb/smart-contract" "@zkdb/permission" "zkdb")
          packages_dir="packages"

          # Loop through all packages
          for package_dir in $(find "$packages_dir" -mindepth 1 -maxdepth 1 -type d);
          do
            echo "Processing: $package_dir"
            cd $package_dir
            
            PACKAGE_NAME=$(node -p "require('./package.json').name")

            if [[ " ${LIST_PACKAGE[@]} " =~ " ${PACKAGE_NAME} " ]]; then
              echo "$PACKAGE_NAME is in the publish list"

              # Check for tag in version
              TAG=$(node -p "
                const version = require('./package.json').version;
                const tag = /alpha|dev|rc/.exec(version)?.[0] || 'latest';
                tag;
              ")
              NPM_VERSION=$(npm show "$PACKAGE_NAME" dist-tags."$TAG" 2>/dev/null || echo 0.0.0)
              PACKAGE_VERSION=$(node -p "require('./package.json').version")
              echo "NPM_VERSION = " $NPM_VERSION
              echo "PACKAGE_VERSION = " $PACKAGE_VERSION

              # Doing version comparison
              VERSION_COMPARE=$(node -e "
                const compare = require('compare-versions');
                const npmVersion = '$NPM_VERSION';
                const packageVersion = '$PACKAGE_VERSION';
                if (compare.compareVersions(packageVersion, npmVersion) === 1) {
                  console.log('true');
                } else {
                  console.log('false');
                }
              ")
              if [ "$VERSION_COMPARE" = "false" ]; then
                echo "Ignore ${PACKAGE_NAME} since no changes"
              else
                echo "Publishing ${PACKAGE_NAME} with tag ${TAG}"
                rm -rf ./build && npm run build && npm publish --tag $TAG --access public
              fi
            else
              echo "$PACKAGE_NAME is not in the publish list"
            fi
            cd -
          done
